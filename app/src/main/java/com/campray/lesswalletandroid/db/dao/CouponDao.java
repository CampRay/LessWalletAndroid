package com.campray.lesswalletandroid.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.campray.lesswalletandroid.db.converter.UserValuesConverter;
import com.campray.lesswalletandroid.db.entity.Product;
import java.util.List;

import com.campray.lesswalletandroid.db.entity.Coupon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUPON".
*/
public class CouponDao extends AbstractDao<Coupon, Long> {

    public static final String TABLENAME = "COUPON";

    /**
     * Properties of entity Coupon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, Long.class, "orderId", true, "_id");
        public final static Property ProductId = new Property(1, Long.class, "productId", false, "PRODUCT_ID");
        public final static Property Cid = new Property(2, String.class, "cid", false, "CID");
        public final static Property UserId = new Property(3, Long.class, "userId", false, "USER_ID");
        public final static Property OrderTotal = new Property(4, float.class, "orderTotal", false, "ORDER_TOTAL");
        public final static Property Price = new Property(5, float.class, "price", false, "PRICE");
        public final static Property Quantity = new Property(6, int.class, "quantity", false, "QUANTITY");
        public final static Property PaymentStatus = new Property(7, int.class, "paymentStatus", false, "PAYMENT_STATUS");
        public final static Property StartTime = new Property(8, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(9, String.class, "endTime", false, "END_TIME");
        public final static Property Deleted = new Property(10, boolean.class, "deleted", false, "DELETED");
        public final static Property UserValues = new Property(11, String.class, "userValues", false, "USER_VALUES");
        public final static Property UserValuesInfo = new Property(12, String.class, "userValuesInfo", false, "USER_VALUES_INFO");
    }

    private DaoSession daoSession;

    private final UserValuesConverter userValuesConverter = new UserValuesConverter();
    private Query<Coupon> product_CouponsQuery;

    public CouponDao(DaoConfig config) {
        super(config);
    }
    
    public CouponDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUPON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: orderId
                "\"PRODUCT_ID\" INTEGER," + // 1: productId
                "\"CID\" TEXT," + // 2: cid
                "\"USER_ID\" INTEGER NOT NULL ," + // 3: userId
                "\"ORDER_TOTAL\" REAL NOT NULL ," + // 4: orderTotal
                "\"PRICE\" REAL NOT NULL ," + // 5: price
                "\"QUANTITY\" INTEGER NOT NULL ," + // 6: quantity
                "\"PAYMENT_STATUS\" INTEGER NOT NULL ," + // 7: paymentStatus
                "\"START_TIME\" TEXT NOT NULL ," + // 8: startTime
                "\"END_TIME\" TEXT," + // 9: endTime
                "\"DELETED\" INTEGER NOT NULL ," + // 10: deleted
                "\"USER_VALUES\" TEXT," + // 11: userValues
                "\"USER_VALUES_INFO\" TEXT);"); // 12: userValuesInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUPON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Coupon entity) {
        stmt.clearBindings();
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(1, orderId);
        }
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(2, productId);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(3, cid);
        }
        stmt.bindLong(4, entity.getUserId());
        stmt.bindDouble(5, entity.getOrderTotal());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindLong(7, entity.getQuantity());
        stmt.bindLong(8, entity.getPaymentStatus());
        stmt.bindString(9, entity.getStartTime());
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(10, endTime);
        }
        stmt.bindLong(11, entity.getDeleted() ? 1L: 0L);
 
        List userValues = entity.getUserValues();
        if (userValues != null) {
            stmt.bindString(12, userValuesConverter.convertToDatabaseValue(userValues));
        }
 
        String userValuesInfo = entity.getUserValuesInfo();
        if (userValuesInfo != null) {
            stmt.bindString(13, userValuesInfo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Coupon entity) {
        stmt.clearBindings();
 
        Long orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(1, orderId);
        }
 
        Long productId = entity.getProductId();
        if (productId != null) {
            stmt.bindLong(2, productId);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(3, cid);
        }
        stmt.bindLong(4, entity.getUserId());
        stmt.bindDouble(5, entity.getOrderTotal());
        stmt.bindDouble(6, entity.getPrice());
        stmt.bindLong(7, entity.getQuantity());
        stmt.bindLong(8, entity.getPaymentStatus());
        stmt.bindString(9, entity.getStartTime());
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(10, endTime);
        }
        stmt.bindLong(11, entity.getDeleted() ? 1L: 0L);
 
        List userValues = entity.getUserValues();
        if (userValues != null) {
            stmt.bindString(12, userValuesConverter.convertToDatabaseValue(userValues));
        }
 
        String userValuesInfo = entity.getUserValuesInfo();
        if (userValuesInfo != null) {
            stmt.bindString(13, userValuesInfo);
        }
    }

    @Override
    protected final void attachEntity(Coupon entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Coupon readEntity(Cursor cursor, int offset) {
        Coupon entity = new Coupon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // productId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cid
            cursor.getLong(offset + 3), // userId
            cursor.getFloat(offset + 4), // orderTotal
            cursor.getFloat(offset + 5), // price
            cursor.getInt(offset + 6), // quantity
            cursor.getInt(offset + 7), // paymentStatus
            cursor.getString(offset + 8), // startTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // endTime
            cursor.getShort(offset + 10) != 0, // deleted
            cursor.isNull(offset + 11) ? null : userValuesConverter.convertToEntityProperty(cursor.getString(offset + 11)), // userValues
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // userValuesInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Coupon entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.getLong(offset + 3));
        entity.setOrderTotal(cursor.getFloat(offset + 4));
        entity.setPrice(cursor.getFloat(offset + 5));
        entity.setQuantity(cursor.getInt(offset + 6));
        entity.setPaymentStatus(cursor.getInt(offset + 7));
        entity.setStartTime(cursor.getString(offset + 8));
        entity.setEndTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDeleted(cursor.getShort(offset + 10) != 0);
        entity.setUserValues(cursor.isNull(offset + 11) ? null : userValuesConverter.convertToEntityProperty(cursor.getString(offset + 11)));
        entity.setUserValuesInfo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Coupon entity, long rowId) {
        entity.setOrderId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Coupon entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Coupon entity) {
        return entity.getOrderId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "coupons" to-many relationship of Product. */
    public List<Coupon> _queryProduct_Coupons(Long productId) {
        synchronized (this) {
            if (product_CouponsQuery == null) {
                QueryBuilder<Coupon> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProductId.eq(null));
                product_CouponsQuery = queryBuilder.build();
            }
        }
        Query<Coupon> query = product_CouponsQuery.forCurrentThread();
        query.setParameter(0, productId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM COUPON T");
            builder.append(" LEFT JOIN PRODUCT T0 ON T.\"PRODUCT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Coupon loadCurrentDeep(Cursor cursor, boolean lock) {
        Coupon entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
        entity.setProduct(product);

        return entity;    
    }

    public Coupon loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Coupon> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Coupon> list = new ArrayList<Coupon>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Coupon> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Coupon> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
